(function () {
  var diagramm = document.getElementById('diagramm')
    , options  = {
      xaxis: {
        ticks: null,           // => format: either [1, 3] or [[1, 'a'], 3]
        minorTicks: null,      // => format: either [1, 3] or [[1, 'a'], 3]
        showLabels: true,      // => setting to true will show the axis ticks labels, hide otherwise
        showMinorLabels: false,// => true to show the axis minor ticks labels, false to hide
        labelsAngle: 0,        // => labels' angle, in degrees
        title: null,           // => axis title
        titleAngle: 0,         // => axis title's angle, in degrees
        noTicks: 5,            // => number of ticks for automagically generated ticks
        minorTickFreq: null,   // => number of minor ticks between major ticks for autogenerated ticks
        tickFormatter: Flotr.defaultTickFormatter, // => fn: number, Object -> string
        tickDecimals: null,    // => no. of decimals, null means auto
        min: null,             // => min. value to show, null means set automatically
        max: null,             // => max. value to show, null means set automatically
        autoscale: false,      // => Turns autoscaling on with true
        autoscaleMargin: 0,    // => margin in % to add if auto-setting min/max
        color: null,           // => color of the ticks
        mode: 'normal',        // => can be 'time' or 'normal'
        timeFormat: null,
        timeMode:'UTC',        // => For UTC time ('local' for local time).
        timeUnit:'millisecond',// => Unit for time (millisecond, second, minute, hour, day,Â month, year)
        scaling: 'linear',     // => Scaling, can be 'linear' or 'logarithmic'
        base: Math.E,
        titleAlign: 'center',
        margin: true           // => Turn off margins with false
      },
      yaxis: {
        ticks: null,           // => format: either [1, 3] or [[1, 'a'], 3]
        minorTicks: null,      // => format: either [1, 3] or [[1, 'a'], 3]
        showLabels: true,      // => setting to true will show the axis ticks labels, hide otherwise
        showMinorLabels: false,// => true to show the axis minor ticks labels, false to hide
        labelsAngle: 0,        // => labels' angle, in degrees
        title: null,           // => axis title
        titleAngle: 90,        // => axis title's angle, in degrees
        noTicks: 5,            // => number of ticks for automagically generated ticks
        minorTickFreq: null,   // => number of minor ticks between major ticks for autogenerated ticks
        tickFormatter: Flotr.defaultTickFormatter, // => fn: number, Object -> string
        tickDecimals: null,    // => no. of decimals, null means auto
        min: null,             // => min. value to show, null means set automatically
        max: null,             // => max. value to show, null means set automatically
        autoscale: false,      // => Turns autoscaling on with true
        autoscaleMargin: 0,    // => margin in % to add if auto-setting min/max
        color: null,           // => The color of the ticks
        scaling: 'linear',     // => Scaling, can be 'linear' or 'logarithmic'
        base: Math.E,
        titleAlign: 'center',
        margin: true           // => Turn off margins with false
      }
    }
    , data     = []
    , reqs     = [];
  $("#newbtn").click(function(){
    draw(false);
  });
  $("#addbtn").click(function(){
    draw(true);
  });

  $("#refbtn").click(function(){
    data = [];
    for(var i =0; i < reqs.length; i++){
      (function(j, last){
        $.ajax(reqs[j]).done(function(res) {
          var o = JSON.parse(res)
          if(o.error){
            alert(o.reason);
          }else{
            data.push(o);
          }
          if(last){
            Flotr.draw(diagramm, data, options);
          }
        });
      })(i, (i == reqs.length - 1))
    }
  });
  // axis
  $("#xmin").change(function(){
    options.xaxis.min = $(this).val() == "" ? null: parseFloat($(this).val());
    Flotr.draw(diagramm, data, options);
  });

  $("#xmax").change(function(){
    options.xaxis.max = $(this).val() == "" ? null: parseFloat($(this).val());
    Flotr.draw(diagramm, data, options);
  });

  $("#ymin").change(function(){
    options.yaxis.min = $(this).val() == "" ? null: parseFloat($(this).val());
    Flotr.draw(diagramm, data, options);
  });

  $("#ymax").change(function(){
    options.yaxis.max = $(this).val() == "" ? null: parseFloat($(this).val());
    Flotr.draw(diagramm, data, options);
  });

  $("#xlinlog").change(function(){
    options.xaxis.scaling = $(this).val()
    Flotr.draw(diagramm, data, options);
  });

  $("#ylinlog").change(function(){
    options.yaxis.scaling = $(this).val();
    Flotr.draw(diagramm, data, options);
  });

  var draw = function(add){
    var id       = $("#calibration").val()
      , xregion  = $("#yregion").val()
      , xquant   = $("#xquant").val()
      , xtype    = $("#xtype").val()
      , yregion  = $("#yregion").val()
      , yquant   = $("#yquant").val()
      , ytype    = $("#ytype").val()

    var r = {url:"_show/data/" + id,
               data:{x: [xregion, xquant, xtype].join(":"),
                     y:[yregion, yquant, ytype].join(":")}
              }
    if(add){
      reqs.push(r);
    }else{
      reqs = [r];
    }

    $.ajax(r).done(function(res) {
      var o = JSON.parse(res)
      if(o.error){
        alert(o.reason);
      }else{
        if(add){
          data.push(o);
        }else{
          data = [o];
        }

        Flotr.draw(diagramm, data, options);
      }
    });
  }
})();